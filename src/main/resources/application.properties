## MUSTACHE CONFIG
spring.mustache.prefix=classpath:/templates/
spring.mustache.suffix=.mustache

## Configuração do DataSource
#spring.datasource.url=jdbc:mysql://localhost:3306/conhecendo_spring_data_jpa
#spring.datasource.username=root
#spring.datasource.password=root
#
## Configuração do Hibernate
#spring.jpa.hibernate.ddl-auto=update
#
## Configuração da JPA
#spring.jpa.show-sql=true

## Configuração do DataSource
spring.jpa.database= POSTGRESQL
spring.datasource.platform=postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/code_dorps
spring.datasource.username=postgres
spring.datasource.password=postgres

## Configuração da JPA
spring.jpa.show-sql=true
spring.jpa.hibernate=true
spring.jpa.properties.jdbc.lob.non_contextual_creation=true

## Configuração do Hibernate
spring.jpa.hibernate.ddl-auto=update

#update ? sempre que a aplicação iniciar ele verifica se suas classes entidades estão de acordo com o banco. Caso não esteja, vai ser feito um update no banco adicionando novas colunas na tabela dessa entidade. Vale lembrar que o update não remove ou renomeia colunas. Por isso, não é recomendado de jeito algum utilizar o Spring Data para gerenciar a evolução do seu banco, para isso existem ferramentas próprias, por exemplo, o FlyWay.
#create ? sempre que iniciar sua aplicação o Spring Data vai apagar tudo e recriar novamente.
#create-drop ? bem semelhante ao create, mas sempre que a aplicação é parada ele apaga tudo que foi criado ou será criado automaticamente.
#validate ? ele faz uma validação sempre que a aplicação inicia e verifica se o banco bate com as suas classes de entidade.
#none ? basicamente é nenhuma das opções acima, ou seja, significa que você não quer que o Spring Data faça alterações no seu banco. Essa opção é a recomendada para produção, para que não ocorra problemas do Spring modificar seu banco.

#APLICATION MESSAGES
message.description.delete=DELETE